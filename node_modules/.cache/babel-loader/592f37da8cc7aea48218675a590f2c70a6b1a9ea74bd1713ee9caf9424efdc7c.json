{"ast":null,"code":"import{useEffect,useState,useCallback}from'react';// Este es un hook personalizado para manejar las muestras de café\nexport const useSampleManager=()=>{// Estado para guardar las muestras de café\n// useState con función inicializadora para cargar desde localStorage o usar valores por defecto\nconst[samples,setSamples]=useState(()=>{// Intenta obtener las muestras guardadas en localStorage\nconst savedSamples=localStorage.getItem('coffeeSamples');return savedSamples?JSON.parse(savedSamples):[// Muestras por defecto si no hay nada en localStorage\n{id:'0001',quality:'Pink Bourbon',origin:'Colombia',date:'2024-07-15',time:'08:00'},{id:'0002',quality:'Geisha',origin:'Colombia',date:'2024-07-15',time:'14:00'},{id:'0003',quality:'Tabi',origin:'Colombia',date:'2024-07-16',time:'10:00'}];});// Estado para las muestras filtradas (para búsquedas)\nconst[filteredSamples,setFilteredSamples]=useState(samples);// Estado para controlar si el modal está abierto o cerrado\nconst[modalOpen,setModalOpen]=useState(false);// Estado para guardar el índice de la muestra que se está editando\nconst[editingSample,setEditingSample]=useState(null);// Estado para el formulario de añadir/editar muestra\nconst[form,setForm]=useState({id:'',quality:'',origin:'',date:'',time:''});// Estado para el término de búsqueda\nconst[searchTerm,setSearchTerm]=useState('');// Función para buscar muestras\n// useCallback para evitar recrear la función en cada render\nconst handleSearch=useCallback(term=>{setSearchTerm(term);const trimmedTerm=term.toLowerCase().trim();// Si no hay término de búsqueda, mostrar todas las muestras\nif(!trimmedTerm){setFilteredSamples(samples);}else{// Filtrar las muestras según el término de búsqueda\nsetFilteredSamples(samples.filter(sample=>sample.id.toLowerCase().includes(trimmedTerm)||sample.quality.toLowerCase().includes(trimmedTerm)||sample.origin.toLowerCase().includes(trimmedTerm)||sample.date.includes(trimmedTerm)));}},[samples]);// Efecto para guardar las muestras en localStorage y actualizar las muestras filtradas\nuseEffect(()=>{// Guardar muestras en localStorage cada vez que cambian\nlocalStorage.setItem('coffeeSamples',JSON.stringify(samples));// Actualizar las muestras filtradas cuando cambian las muestras\nhandleSearch(searchTerm);},[samples,handleSearch,searchTerm]);// Función para abrir el modal (añadir o editar)\nconst openModal=useCallback(function(mode){let index=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(mode==='add'){// Si es modo \"añadir\", crear un nuevo ID basado en el máximo ID existente\nconst maxId=Math.max(...samples.map(s=>parseInt(s.id,10)),0);const newId=String(maxId+1).padStart(4,'0');// Inicializar el formulario con valores por defecto\nsetForm({id:newId,quality:'',origin:'',date:new Date().toISOString().split('T')[0],// Fecha actual en formato YYYY-MM-DD\ntime:''});setEditingSample(null);}else if(mode==='edit'&&index!==null){// Si es modo \"editar\", cargar los datos de la muestra seleccionada\nsetForm({...filteredSamples[index]});setEditingSample(index);}// Abrir el modal\nsetModalOpen(true);},[filteredSamples,samples]);// Función para cerrar el modal\nconst closeModal=useCallback(()=>{setModalOpen(false);},[]);// Función para manejar cambios en los campos del formulario\nconst handleChange=useCallback(e=>{const{id,value}=e.target;setForm(prevForm=>({...prevForm,[id]:value}));},[]);// Enviar formulario (añadir/editar muestra)\nconst handleSubmit=useCallback(e=>{e.preventDefault();// Validación básica: asegurarse de que los campos requeridos estén llenos\nif(!form.id||!form.quality||!form.origin||!form.date){alert('Por favor complete todos los campos requeridos');return;}if(editingSample!==null){// Si estamos editando, actualizar la muestra existente\nconst updated=[...samples];const originalIndex=samples.findIndex(s=>s.id===filteredSamples[editingSample].id);if(originalIndex!==-1){updated[originalIndex]=form;setSamples(updated);}}else{// Si estamos añadiendo, verificar que el ID no exista ya\nif(samples.some(s=>s.id===form.id)){alert('El ID ya existe. Por favor use otro.');return;}// Añadir la nueva muestra\nsetSamples(prevSamples=>[...prevSamples,form]);}// Cerrar el modal después de guardar\ncloseModal();},[editingSample,filteredSamples,form,samples,closeModal]);// Eliminar muestra\nconst deleteSample=useCallback(index=>{// Pedir confirmación antes de eliminar\nif(window.confirm('¿Estás seguro de eliminar esta muestra?')){const toDelete=filteredSamples[index];setSamples(prevSamples=>prevSamples.filter(s=>s.id!==toDelete.id));}},[filteredSamples]);// Generar PDF\nconst generatePDF=useCallback(()=>{try{// Verificar si la biblioteca jsPDF está cargada\nif(typeof window.jspdf==='undefined'){alert('La biblioteca jsPDF no está cargada. Por favor, asegúrese de incluirla en su proyecto.');return;}// Crear un nuevo documento PDF\nconst{jsPDF}=window.jspdf;const doc=new jsPDF();// Agregar título al PDF\ndoc.setFontSize(16);doc.text(\"Reporte de Muestras de Café\",14,15);// Agregar fecha de generación\ndoc.setFontSize(10);doc.text(`Generado el: ${new Date().toLocaleString()}`,14,22);// Crear la tabla con los datos de las muestras\nconst columns=[\"ID\",\"Calidad\",\"Origen\",\"Fecha de Catación\",\"Hora\"];const rows=samples.map(sample=>[sample.id,sample.quality,sample.origin,sample.date,sample.time]);// Usar autoTable para crear una tabla bonita\ndoc.autoTable({head:[columns],body:rows,startY:30,headStyles:{fillColor:[75,46,46]},// Color café oscuro para los encabezados\nalternateRowStyles:{fillColor:[245,245,245]}// Filas alternadas con gris claro\n});// Agregar total de muestras al final\nconst finalY=doc.lastAutoTable.finalY||30;doc.text(`Total de muestras: ${samples.length}`,14,finalY+10);// Guardar el PDF\ndoc.save(\"reporte_muestras_cafe.pdf\");}catch(error){console.error(\"Error al generar el PDF:\",error);alert(\"Ocurrió un error al generar el PDF. Verifica la consola para más detalles.\");}},[samples]);// Retornar todos los estados y funciones que necesitamos usar en otros componentes\nreturn{samples,filteredSamples,modalOpen,form,editingSample,handleSearch,openModal,closeModal,handleChange,handleSubmit,deleteSample,generatePDF};};","map":{"version":3,"names":["useEffect","useState","useCallback","useSampleManager","samples","setSamples","savedSamples","localStorage","getItem","JSON","parse","id","quality","origin","date","time","filteredSamples","setFilteredSamples","modalOpen","setModalOpen","editingSample","setEditingSample","form","setForm","searchTerm","setSearchTerm","handleSearch","term","trimmedTerm","toLowerCase","trim","filter","sample","includes","setItem","stringify","openModal","mode","index","arguments","length","undefined","maxId","Math","max","map","s","parseInt","newId","String","padStart","Date","toISOString","split","closeModal","handleChange","e","value","target","prevForm","handleSubmit","preventDefault","alert","updated","originalIndex","findIndex","some","prevSamples","deleteSample","window","confirm","toDelete","generatePDF","jspdf","jsPDF","doc","setFontSize","text","toLocaleString","columns","rows","autoTable","head","body","startY","headStyles","fillColor","alternateRowStyles","finalY","lastAutoTable","save","error","console"],"sources":["C:/Users/Flia_PoloGarcia/Desktop/OSNEIDER_POLO_AA5_EV01/src/hooks/useSampleManager.js"],"sourcesContent":["import { useEffect, useState, useCallback } from 'react';\r\n\r\n// Este es un hook personalizado para manejar las muestras de café\r\nexport const useSampleManager = () => {\r\n\r\n  // Estado para guardar las muestras de café\r\n  // useState con función inicializadora para cargar desde localStorage o usar valores por defecto\r\n  const [samples, setSamples] = useState(() => {\r\n    // Intenta obtener las muestras guardadas en localStorage\r\n    const savedSamples = localStorage.getItem('coffeeSamples');\r\n    return savedSamples ? JSON.parse(savedSamples) : [\r\n      // Muestras por defecto si no hay nada en localStorage\r\n      { id: '0001', quality: 'Pink Bourbon', origin: 'Colombia', date: '2024-07-15', time: '08:00' },\r\n      { id: '0002', quality: 'Geisha', origin: 'Colombia', date: '2024-07-15', time: '14:00' },\r\n      { id: '0003', quality: 'Tabi', origin: 'Colombia', date: '2024-07-16', time: '10:00' }\r\n    ];\r\n  });\r\n  \r\n  // Estado para las muestras filtradas (para búsquedas)\r\n  const [filteredSamples, setFilteredSamples] = useState(samples);\r\n  // Estado para controlar si el modal está abierto o cerrado\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  // Estado para guardar el índice de la muestra que se está editando\r\n  const [editingSample, setEditingSample] = useState(null);\r\n  // Estado para el formulario de añadir/editar muestra\r\n  const [form, setForm] = useState({ id: '', quality: '', origin: '', date: '', time: '' });\r\n  // Estado para el término de búsqueda\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  // Función para buscar muestras\r\n  // useCallback para evitar recrear la función en cada render\r\n  const handleSearch = useCallback((term) => {\r\n    setSearchTerm(term);\r\n    const trimmedTerm = term.toLowerCase().trim();\r\n    \r\n    // Si no hay término de búsqueda, mostrar todas las muestras\r\n    if (!trimmedTerm) {\r\n      setFilteredSamples(samples);\r\n    } else {\r\n      // Filtrar las muestras según el término de búsqueda\r\n      setFilteredSamples(samples.filter(sample =>\r\n        sample.id.toLowerCase().includes(trimmedTerm) ||\r\n        sample.quality.toLowerCase().includes(trimmedTerm) ||\r\n        sample.origin.toLowerCase().includes(trimmedTerm) ||\r\n        sample.date.includes(trimmedTerm)\r\n      ));\r\n    }\r\n  }, [samples]);\r\n\r\n  // Efecto para guardar las muestras en localStorage y actualizar las muestras filtradas\r\n  useEffect(() => {\r\n    // Guardar muestras en localStorage cada vez que cambian\r\n    localStorage.setItem('coffeeSamples', JSON.stringify(samples));\r\n\r\n    // Actualizar las muestras filtradas cuando cambian las muestras\r\n    handleSearch(searchTerm);\r\n  }, [samples, handleSearch, searchTerm]);\r\n\r\n  // Función para abrir el modal (añadir o editar)\r\n  const openModal = useCallback((mode, index = null) => {\r\n    if (mode === 'add') {\r\n      // Si es modo \"añadir\", crear un nuevo ID basado en el máximo ID existente\r\n      const maxId = Math.max(...samples.map(s => parseInt(s.id, 10)), 0);\r\n      const newId = String(maxId + 1).padStart(4, '0');\r\n      \r\n      // Inicializar el formulario con valores por defecto\r\n      setForm({ \r\n        id: newId, \r\n        quality: '', \r\n        origin: '', \r\n        date: new Date().toISOString().split('T')[0], // Fecha actual en formato YYYY-MM-DD\r\n        time: '' \r\n      });\r\n      setEditingSample(null);\r\n    } else if (mode === 'edit' && index !== null) {\r\n      // Si es modo \"editar\", cargar los datos de la muestra seleccionada\r\n      setForm({...filteredSamples[index]});\r\n      setEditingSample(index);\r\n    }\r\n    // Abrir el modal\r\n    setModalOpen(true);\r\n  }, [filteredSamples, samples]);\r\n\r\n  // Función para cerrar el modal\r\n  const closeModal = useCallback(() => {\r\n    setModalOpen(false);\r\n  }, []);\r\n\r\n  // Función para manejar cambios en los campos del formulario\r\n  const handleChange = useCallback((e) => {\r\n    const { id, value } = e.target;\r\n    setForm(prevForm => ({ ...prevForm, [id]: value }));\r\n  }, []);\r\n\r\n  // Enviar formulario (añadir/editar muestra)\r\n  const handleSubmit = useCallback((e) => {\r\n    e.preventDefault();\r\n\r\n    // Validación básica: asegurarse de que los campos requeridos estén llenos\r\n    if (!form.id || !form.quality || !form.origin || !form.date) {\r\n      alert('Por favor complete todos los campos requeridos');\r\n      return;\r\n    }\r\n    \r\n    if (editingSample !== null) {\r\n      // Si estamos editando, actualizar la muestra existente\r\n      const updated = [...samples];\r\n      const originalIndex = samples.findIndex(s => s.id === filteredSamples[editingSample].id);\r\n      \r\n      if (originalIndex !== -1) {\r\n        updated[originalIndex] = form;\r\n        setSamples(updated);\r\n      }\r\n    } else {\r\n      // Si estamos añadiendo, verificar que el ID no exista ya\r\n      if (samples.some(s => s.id === form.id)) {\r\n        alert('El ID ya existe. Por favor use otro.');\r\n        return;\r\n      }\r\n      \r\n      // Añadir la nueva muestra\r\n      setSamples(prevSamples => [...prevSamples, form]);\r\n    }\r\n    \r\n    // Cerrar el modal después de guardar\r\n    closeModal();\r\n  }, [editingSample, filteredSamples, form, samples, closeModal]);\r\n\r\n  // Eliminar muestra\r\n  const deleteSample = useCallback((index) => {\r\n    // Pedir confirmación antes de eliminar\r\n    if (window.confirm('¿Estás seguro de eliminar esta muestra?')) {\r\n      const toDelete = filteredSamples[index];\r\n      setSamples(prevSamples => prevSamples.filter(s => s.id !== toDelete.id));\r\n    }\r\n  }, [filteredSamples]);\r\n\r\n  // Generar PDF\r\n  const generatePDF = useCallback(() => {\r\n    try {\r\n      // Verificar si la biblioteca jsPDF está cargada\r\n      if (typeof window.jspdf === 'undefined') {\r\n        alert('La biblioteca jsPDF no está cargada. Por favor, asegúrese de incluirla en su proyecto.');\r\n        return;\r\n      }\r\n      \r\n      // Crear un nuevo documento PDF\r\n      const { jsPDF } = window.jspdf;\r\n      const doc = new jsPDF();\r\n      \r\n      // Agregar título al PDF\r\n      doc.setFontSize(16);\r\n      doc.text(\"Reporte de Muestras de Café\", 14, 15);\r\n      \r\n      // Agregar fecha de generación\r\n      doc.setFontSize(10);\r\n      doc.text(`Generado el: ${new Date().toLocaleString()}`, 14, 22);\r\n      \r\n      // Crear la tabla con los datos de las muestras\r\n      const columns = [\"ID\", \"Calidad\", \"Origen\", \"Fecha de Catación\", \"Hora\"];\r\n      const rows = samples.map(sample => [\r\n        sample.id, \r\n        sample.quality, \r\n        sample.origin, \r\n        sample.date, \r\n        sample.time\r\n      ]);\r\n      \r\n      // Usar autoTable para crear una tabla bonita\r\n      doc.autoTable({ \r\n        head: [columns], \r\n        body: rows, \r\n        startY: 30,\r\n        headStyles: { fillColor: [75, 46, 46] }, // Color café oscuro para los encabezados\r\n        alternateRowStyles: { fillColor: [245, 245, 245] } // Filas alternadas con gris claro\r\n      });\r\n      \r\n      // Agregar total de muestras al final\r\n      const finalY = doc.lastAutoTable.finalY || 30;\r\n      doc.text(`Total de muestras: ${samples.length}`, 14, finalY + 10);\r\n      \r\n      // Guardar el PDF\r\n      doc.save(\"reporte_muestras_cafe.pdf\");\r\n    } catch (error) {\r\n      console.error(\"Error al generar el PDF:\", error);\r\n      alert(\"Ocurrió un error al generar el PDF. Verifica la consola para más detalles.\");\r\n    }\r\n  }, [samples]);\r\n\r\n  // Retornar todos los estados y funciones que necesitamos usar en otros componentes\r\n  return {\r\n    samples,\r\n    filteredSamples,\r\n    modalOpen,\r\n    form,\r\n    editingSample,\r\n    handleSearch,\r\n    openModal,\r\n    closeModal,\r\n    handleChange,\r\n    handleSubmit,\r\n    deleteSample,\r\n    generatePDF\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}